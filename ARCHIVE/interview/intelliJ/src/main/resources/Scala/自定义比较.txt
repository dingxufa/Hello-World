val rdd2 = rdd1.sortBy(x => Girl(x._2,x._3),false)

/**
* 方式一：
* @param faceValue
* @param age
//case class Girl(val faceValue: Int, val age: Int)extends Ordered[Girl] with Serializable{
// override def compare(that:Girl):Int={
//  if(this.faceValue == that.faceValue){
//    that.age - this.age
//  }else{
//    this.faceValue - that.faceValue
//  }
// }
//}*/


//必须要放到上面
object OrderContext{
  implicit val girlOrdering = new Ordering[Girl]{
    override def compare(x:Girl,y:Girl):Int = {
      if(x.faceValue > y.faceValue) 1
      else if(x.faceValue == y.faceValue){
        if(x.age > y.age) -1 else 1
      }else -1
    }
  }
}
/**
 * 方式二：通过隐式转换完成排序
 * @param faceValue
 * @param age
 */
case class Girl(faceValue:Int,age:Int) extends Serializable{
}

===========================class
//class Person[T]{
//  def choose[T <: Comparable[T]](first:T,second:T):T={
//    if(first.compareTo(second)>0) first else second
//  }
//}
//



//viewBound
/class Chooser[T <% Ordered[T]]{
//  def bigger(first:T,second:T)={
//    if(first > second) first else second
//  }
//}

//class Chooser2[T]{
//  def bigger(first:T,second:T)(implicit ord:T => Ordered[T])={
//    if(first > second) first else second
//  }
//}



//contextBound
//class Chooser3[T : Ordering[T] ] {
//  def bigger(first:T,second:T):T={
//    val ord   = implicitly [Ordering[T]]
//    if(first > second) first else second
//  }
//}
//
//class Chooser4[T]{
//  def bigger(first:T,second:T)(implicit ord:Ordering[T]):T={
//    if(ord.gt(first,second))first else  second
//  }
//}
