============================实例化Spring容器常用的两种方式：

方法一:
在类路径下寻找配置文件来实例化容器
ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[]{"beans.xml"});
可以在整个类路径中寻找xml文件
     * 通过这种方式加载。需要将spring的配置文件放到当前项目的classpath路径下
     *  classpath路径指的是当前项目的src目录，该目录是java源文件的存放位置。

方法二:
在文件系统路径下寻找配置文件来实例化容器
ApplicationContext ctx = new FileSystemXmlApplicationContext(new String[]{“d:\\beans.xml“});

Spring的配置文件可以指定多个，可以通过String数组传入。


=============从spring容器中得到bean
当spring容器启动后，因为spring容器可以管理bean对象的创建，销毁等生命周期，所以我们只需从容器直接获取Bean对象就行，而不用编写一句代码来创建bean对象。从容器获取bean对象的代码如下：
 ApplicationContext ctx=new ClassPathXmlApplicationContext("beans.xml");
Girl girl =(Girl)ctx.getBean("girl");

========bean的作用域   init-method  destroy-method
.singleton(默认值)
 在每个Spring IoC容器中一个bean定义只有一个对象实例(共享)。
  默认情况下会在容器启动时初始化bean，但我们可以指定Bean节点的lazy-init=“true”来延迟初始化bean，这时候，只有第一次获取bean会才初始化bean。如：
 <bean id="xxx" class="cn.itcast.OrderServiceBean" lazy-init="true"/>
.prototype
      允许bean可以被多次实例化(使用一次就创建一个实例)
/**
	 * 1) 对象创建： 单例/多例
	 * 	scope="singleton", 默认值， 即 默认是单例	【service/dao/工具类】
	 *  scope="prototype", 多例； 				【Action对象】
	 *
	 * 2) 什么时候创建?
	 * 	  scope="prototype"  在用到对象的时候，才创建对象。
	 *    scope="singleton"  在启动(容器初始化之前)， 就已经创建了bean，且整个应用只有一个。
	 * 3)是否延迟创建
	 * 	  lazy-init="false"  默认为false,  不延迟创建，即在启动时候就创建对象
	 * 	  lazy-init="true"   延迟初始化， 在用到对象的时候才创建对象
	 *    （只对单例有效）
	 * 4) 创建对象之后，初始化/销毁
	 * 	  init-method="init_user"       【对应对象的init_user方法，在对象创建爱之后执行 】
	 *    destroy-method="destroy_user"  【在调用容器对象的destriy方法时候执行，(容器用实现类)】
	 */
	@Test
	public void testIOC() throws Exception {
		// 得到IOC容器对象  【用实现类，因为要调用销毁的方法】
		ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext("cn/itcast/a_hello/applicationContext.xml");
		System.out.println("-----容器创建-----");
		// 从容器中获取bean
		User user1 = (User) ac.getBean("user");
		User user2 = (User) ac.getBean("user");
		System.out.println(user1);
		System.out.println(user2);
		// 销毁容器对象
		ac.destroy();
	}


======================spring在运行期创建代理，有两种代理方式：
  若目标对象实现了若干接口，spring就会使用JDK动态代理。
  若目标对象没有实现任何接口，spring就使用CGLIB库生成目标对象的子类。
================动态代理，
	1）代理对象，不需要实现接口；
	2）代理对象的生成，是利用JDKAPI， 动态的在内存中构建代理对象(需要我们指定创建 代理对象/目标对象 实现的接口的类型；);
	3)  动态代理， JDK代理， 接口代理；
JDK中生成代理对象的API：
|-- Proxy
	static Object newProxyInstance(
ClassLoader loader,       指定当前目标对象使用类加载器
 Class<?>[] interfaces,     目标对象实现的接口的类型
InvocationHandler h       事件处理器
)
动态代理总结：
	代理对象不需要实现接口，但是目标对象一定要实现接口；否则不能用动态代理！
	(class  $Proxy0  implements IuserDao)
思考：
	有一个目标对象，想要功能扩展，但目标对象没有实现接口，怎样功能扩展？
	Class  UserDao{}
	// 子类的方式
	Class subclass  extends  UserDao{}
	以子类的方式实现(cglib代理)

<!-- 切面类 -->
	<bean id="aop" class="part02.f_aop_xml.Aop"></bean>

	<!-- Aop配置 -->
	<aop:config>
		<!-- 定义一个切入点表达式： 拦截哪些方法 -->
		<aop:pointcut expression="execution(* cn.itcast.f_aop_xml.*.*(..))" id="pt"/>
		<!-- 切面 -->
		<aop:aspect ref="aop">
			<!-- 环绕通知 -->
			<aop:around method="around" pointcut-ref="pt"/>
			<!-- 前置通知： 在目标方法调用前执行 -->
			<aop:before method="begin" pointcut-ref="pt"/>
			<!-- 后置通知： -->
			<aop:after method="after" pointcut-ref="pt"/>
			<!-- 返回后通知 -->
			<aop:after-returning method="afterReturning" pointcut-ref="pt"/>
			<!-- 异常通知 -->
			<aop:after-throwing method="afterThrowing" pointcut-ref="pt"/>

		</aop:aspect>
	</aop:config>


====================编程式事务控制
	自己手动控制事务，就叫做编程式事务控制。
	Jdbc代码：
		Conn.setAutoCommite(false);  // 设置手动控制事务
	Hibernate代码：
		Session.beginTransaction();    // 开启一个事务
	【细粒度的事务控制： 可以对指定的方法、指定的方法的某几行添加事务控制】
	(比较灵活，但开发起来比较繁琐： 每次都要开启、提交、回滚.)

===================声明式事务控制
	Spring提供了对事务的管理, 这个就叫声明式事务管理。
	Spring提供了对事务控制的实现。用户如果想用Spring的声明式事务管理，只需要在配置文件中配置即可； 不想使用时直接移除配置。这个实现了对事务控制的最大程度的解耦。
	Spring声明式事务管理，核心实现就是基于Aop。
	【粗粒度的事务控制： 只能给整个方法应用事务，不可以对方法的某几行应用事务。】
	(因为aop拦截的是方法。)

	Spring声明式事务管理器类：
		Jdbc技术：DataSourceTransactionManager
		Hibernate技术：HibernateTransactionManager

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	>


	<!-- 1. 数据源对象: C3P0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl" value="jdbc:mysql:///hib_demo"></property>
		<property name="user" value="root"></property>
		<property name="password" value="root"></property>
		<property name="initialPoolSize" value="3"></property>
		<property name="maxPoolSize" value="10"></property>
		<property name="maxStatements" value="100"></property>
		<property name="acquireIncrement" value="2"></property>
	</bean>

	<!-- 2. JdbcTemplate工具类实例 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 3. dao实例 -->
	<bean id="deptDao" class="cn.itcast.a_tx.DeptDao">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>

	<!-- 4. service实例 -->
	<bean id="deptService" class="cn.itcast.a_tx.DeptService">
		<property name="deptDao" ref="deptDao"></property>
	</bean>

	<!-- #############5. Spring声明式事务管理配置############### -->
	<!-- 5.1 配置事务管理器类 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5.2 配置事务增强(如果管理事务?) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>

	<!-- 5.3 Aop配置： 拦截哪些方法(切入点表表达式) + 应用上面的事务增强配置 -->
	<aop:config>
		<aop:pointcut expression="execution(* cn.itcast.a_tx.DeptService.*())" id="pt"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
		//<aop:aspect id="" ref=""></aop:aspect>
	</aop:config>

</beans>



@Transactional(isolation=Isolation.DEFAULT,rollbackFor=ArithmeticException.class,
readOnly=false,propagation=Propagation.REQUIRED)

传播行为：定义关于客户端和被调用方法的事物边界
隔离级别：并发访问下数据库的全安性
事务超时：事务的最长持续时间，如果事务一直没有提交或回滚，那么超出该时间后，系统将自动回滚事务，单位秒。
-1表示不超时，最终由底层数据库系统决定。
只读状态：只读事务不修改任何数据，可以优化查询操作。


<!-- 2. JdbcTemplate工具类实例 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 事务管理器类 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 开启注解扫描 -->
	<context:component-scan base-package="cn.itcast.b_anno"></context:component-scan>

	<!-- 注解方式实现事务： 指定注解方式实现事务 -->
	<tx:annotation-driven transaction-manager="txManager"/>
</beans>
@Transactional(
			readOnly = false,  // 读写事务
			timeout = -1,       // 事务的超时时间不限制
			noRollbackFor = ArithmeticException.class,  // 遇到数学异常不回滚
			isolation = Isolation.DEFAULT,              // 事务的隔离级别，数据库的默认
			propagation = Propagation.REQUIRED			// 事务的传播行为
	)
	public void save(Dept dept){
		deptDao.save(dept);
		int i = 1/0;
		deptDao.save(dept);
	}
事务传播行为:
	Propagation.REQUIRED
		指定当前的方法必须在事务的环境下执行；
		如果当前运行的方法，已经存在事务， 就会加入当前的事务；
	Propagation.REQUIRED_NEW
		指定当前的方法必须在事务的环境下执行；
		如果当前运行的方法，已经存在事务：  事务会挂起； 会始终开启一个新的事务，执行完后；
		刚才挂起的事务才继续运行。



